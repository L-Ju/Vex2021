int autotest = 1;
if(autotest == 1){
  FILE* usd_file_write = fopen("/usd/auto.txt", "w");
  while(1){
     // leftY, rightY, shooter, pushup, rollerleft, rollerright, pushup, delay
    //tank drive
        drive -> getModel() -> tank(controller.getAnalog(ControllerAnalog::leftY),
                                    controller.getAnalog(ControllerAnalog::rightY));

        double num1 = controller.getAnalog(ControllerAnalog::leftY);
        double num2 = controller.getAnalog(ControllerAnalog::rightY);
        fprintf(usd_file_write, "%lf ", num1);
        fprintf(usd_file_write, "%lf ", num2);
        if (controller.getDigital(okapi::ControllerDigital::X))  {
            MTR_shooter.moveVelocity(-600);
            fputs("-600 ", usd_file_write);
            fputs("0 ", usd_file_write);
        } else if (controller.getDigital(okapi::ControllerDigital::L2)) {
            MTR_shooter.moveVelocity(600);
            fputs("600 ", usd_file_write);
            fputs("0 ", usd_file_write);
        } else if (controller.getDigital(okapi::ControllerDigital::L1)) {
            MTR_shooter.moveVelocity(-600);
            fputs("-600 ", usd_file_write);
            MTR_pushup.moveVelocity(-400);
            fputs("-400 ", usd_file_write);
        } else {
            MTR_shooter.moveVelocity(0);
            fputs("0 ", usd_file_write);
            fputs("0 ", usd_file_write);
        }

        if (controller.getDigital(okapi::ControllerDigital::R1)) {
            MTR_rollerLeft.moveVelocity(-200);
            fputs("-200 ", usd_file_write);
            MTR_rollerRight.moveVelocity(200);
            fputs("200 ", usd_file_write);
            MTR_pushup.moveVelocity(-600);
            fputs("-600 ", usd_file_write);
        } else if (controller.getDigital(okapi::ControllerDigital::R2)) {
            MTR_rollerLeft.moveVelocity(200);
            fputs("200 ", usd_file_write);
            MTR_rollerRight.moveVelocity(-200);
            fputs("-200 ", usd_file_write);
            if(controller.getDigital(okapi::ControllerDigital::L1)){
                fputs("-400 ", usd_file_write);
            }
            else{
                fputs("0 ", usd_file_write);
            }
        } else {
            MTR_rollerLeft.moveVelocity(0);
            fputs("0 ", usd_file_write);
            MTR_rollerRight.moveVelocity(0) ;
            fputs("0 ", usd_file_write);
            if(!controller.getDigital(okapi::ControllerDigital::L1)){
                MTR_pushup.moveVelocity(0);
                fputs("0 ", usd_file_write);
            }
            else{
                fputs("-400 ", usd_file_write);
            }
        }
        fputs("10 ", usd_file_write);
        pros::delay(10);
    }
    fclose(usd_file_write);
}
else{
  while(1){
     // leftY, rightY, shooter, pushup, rollerleft, rollerright, pushup, delay

    //tank drive
        drive -> getModel() -> tank(controller.getAnalog(ControllerAnalog::leftY),
                                    controller.getAnalog(ControllerAnalog::rightY));

        if (controller.getDigital(okapi::ControllerDigital::X))  {
            MTR_shooter.moveVelocity(-600);
        } else if (controller.getDigital(okapi::ControllerDigital::L2)) {
            MTR_shooter.moveVelocity(600);
        } else if (controller.getDigital(okapi::ControllerDigital::L1)) {
            MTR_shooter.moveVelocity(-600);
            MTR_pushup.moveVelocity(-400);
        } else {
            MTR_shooter.moveVelocity(0);
        }

        if (controller.getDigital(okapi::ControllerDigital::R1)) {
            pickUpBalls();
        } else if (controller.getDigital(okapi::ControllerDigital::R2)) {
            MTR_rollerLeft.moveVelocity(200);
            MTR_rollerRight.moveVelocity(-200);
        } else {
            MTR_rollerLeft.moveVelocity(0);
            MTR_rollerRight.moveVelocity(0) ;
            if(!controller.getDigital(okapi::ControllerDigital::L1)){
                MTR_pushup.moveVelocity(0);
            }
        }
        pros::delay(10);
    }
}


FILE* usd_file_read = fopen("/usd/auto.txt", "r");
/*
double test[1];
fscanf(usd_file_read, "%lf", test);
std::cout << test[0] << std::endl;
drive -> getModel() -> tank(test[0], test[0]);
*/

while(1){
 //leftY, rightY, shooter, pushup, rollerleft, rollerright, pushup, delay;
double leftY[1], rightY[1];
int shooter[1], pushup[1], rollerleft[1], rollerright[1], delay[1];
//std::cin >> leftY >> rightY >> shooter >> pushup >> rollerleft >> rollerright;
fscanf(usd_file_read, "%lf", leftY);
fscanf(usd_file_read, "%lf", rightY);
fscanf(usd_file_read, "%d", shooter);
fscanf(usd_file_read, "%d", pushup);
fscanf(usd_file_read, "%d", rollerleft);
fscanf(usd_file_read, "%d", rollerright);

drive -> getModel() -> tank(leftY[0], rightY[0]);
MTR_shooter.moveVelocity(shooter[0]);
MTR_pushup.moveVelocity(pushup[0]);
MTR_rollerLeft.moveVelocity(rollerleft[0]);
MTR_rollerRight.moveVelocity(rollerright[0]);
//std::cin >> pushup >> delay;
fscanf(usd_file_read, "%d", pushup);
fscanf(usd_file_read, "%d", delay);
MTR_pushup.moveVelocity(pushup[0]);
pros::delay(delay[0]);
}
fclose(usd_file_read);
